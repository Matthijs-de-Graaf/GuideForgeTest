name: Backend CI

on:
  push:
    branches: [ "develop", "feature/*" ]
  pull_request:
    branches: [ "develop", "main" ]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ALLOW_EMPTY_PASSWORD: "no"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Kopieer init.sql naar een plek waar MySQL het automatisch uitvoert
      - name: Copy init.sql to MySQL init directory
        run: |
          mkdir -p ./mysql-init
          cp docker-entrypoint-initdb.d/init.sql ./mysql-init/init.sql

      # Start MySQL + run init.sql via docker exec
      - name: Initialize Database Schema
        run: |
          echo "Waiting for MySQL to be healthy..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" --silent; then
              echo "MySQL is up! Running init.sql..."
              cat ./mysql-init/init.sql | mysql -h 127.0.0.1 -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" ${{ secrets.MYSQL_DATABASE }}
              echo "Database initialized!"
              exit 0
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 5
          done
          echo "MySQL failed to start."
          exit 1

      # Debug: toon tabellen
      - name: Verify tables created
        run: |
          echo "Listing tables in ${{ secrets.MYSQL_DATABASE }}..."
          echo "SHOW TABLES;" | mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p"${{ secrets.MYSQL_PASSWORD }}" ${{ secrets.MYSQL_DATABASE }}

      # Run Maven tests
      - name: Run unit & integration tests
        working-directory: ./backend
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/${{ secrets.MYSQL_DATABASE }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Europe/Amsterdam
          SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: validate  # Gebruik 'validate' of 'none' in CI
        run: ./mvnw clean test -Dspring.profiles.active=test

      # OWASP Dependency Check
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'backend'
          path: './backend'
          format: 'HTML,JSON'
          args: '--enableExperimental'

      # Upload rapport
      - name: Upload Dependency-Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: |
            ./backend/dependency-check-report.html
            ./backend/dependency-check-report.json

      # Optioneel: Upload test results
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./backend/target/surefire-reports/